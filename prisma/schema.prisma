generator client {
  provider = "prisma-client-js"
}

generator fabbrica {
  provider = "prisma-fabbrica"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Participant {
  id                            String                          @id
  lastName                      String
  firstName                     String
  createdAt                     DateTime                        @default(now())
  ParticipantOnEnrollmentStatus ParticipantOnEnrollmentStatus[]
  ParticipantMailAddress        ParticipantMailAddress[]
  ParticipantOnTask             ParticipantOnTask[]
  ParticipantOnPair             ParticipantOnPair[]
  ParticipantOnTeam             ParticipantOnTeam[]
}

model EnrollmentStatus {
  id                            Int                             @id
  status                        String
  ParticipantOnEnrollmentStatus ParticipantOnEnrollmentStatus[]
}

model ParticipantOnEnrollmentStatus {
  participantId      String           @id
  enrollmentStatusId Int
  participant        Participant      @relation(fields: [participantId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  enrollmentStatus   EnrollmentStatus @relation(fields: [enrollmentStatusId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model ParticipantMailAddress {
  participantId String      @id
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  mailAddress   String      @unique
}

model Task {
  id                String              @id
  taskName          String
  ParticipantOnTask ParticipantOnTask[]
}

model TaskStatus {
  id                Int                 @id
  status            String
  ParticipantOnTask ParticipantOnTask[]
}

model ParticipantOnTask {
  participantId String
  Participant   Participant @relation(fields: [participantId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  taskId        String
  Task          Task        @relation(fields: [taskId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  taskStatusId  Int
  TaskStatus    TaskStatus  @relation(fields: [taskStatusId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@id([participantId, taskId])
}

model Team {
  id                String              @id
  teamName          Int
  TeamOnPair        TeamOnPair[]
  ParticipantOnTeam ParticipantOnTeam[]
}

model Pair {
  id                String              @id
  pairName          String
  TeamOnPair        TeamOnPair[]
  ParticipantOnPair ParticipantOnPair[]
}

model TeamOnPair {
  pairId String
  Pair   Pair   @relation(fields: [pairId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  teamId String
  Team   Team   @relation(fields: [teamId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@id([pairId])
}

model ParticipantOnTeam {
  participantId String
  Participant   Participant @relation(fields: [participantId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  teamId        String
  Team          Team        @relation(fields: [teamId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@id([participantId])
}

model ParticipantOnPair {
  participantId String
  Participant   Participant @relation(fields: [participantId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  pairId        String
  Pair          Pair        @relation(fields: [pairId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@id([participantId])
}
