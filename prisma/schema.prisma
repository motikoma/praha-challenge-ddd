generator client {
  provider = "prisma-client-js"
}

generator fabbrica {
  provider = "prisma-fabbrica"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// sample data start
model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  posts Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  viewCount Int      @default(0)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
}

// sample data end

model Participant {
  id                            String                          @id
  lastName                      String
  firstName                     String
  ParticipantOnEnrollmentStatus ParticipantOnEnrollmentStatus[]
  ParticipantMailAddress        ParticipantMailAddress[]
  ParticipantOnTask             ParticipantOnTask[]
}

model EnrollmentStatus {
  id                            Int                             @id
  status                        String
  ParticipantOnEnrollmentStatus ParticipantOnEnrollmentStatus[]
}

model ParticipantOnEnrollmentStatus {
  participantId      String           @id
  enrollmentStatusId Int
  participant        Participant      @relation(fields: [participantId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  enrollmentStatus   EnrollmentStatus @relation(fields: [enrollmentStatusId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model ParticipantMailAddress {
  participantId String      @id
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  mailAddress   String      @unique
}

model Task {
  id                String              @id
  taskName          String
  taskStatusId      Int
  taskStatus        TaskStatus          @relation(fields: [taskStatusId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  ParticipantOnTask ParticipantOnTask[]
}

model TaskStatus {
  id     Int    @id
  status String
  Task   Task[]
}

model ParticipantOnTask {
  participantId String
  taskId        String
  Participant   Participant @relation(fields: [participantId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  Task          Task        @relation(fields: [taskId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@id([participantId, taskId])
}
